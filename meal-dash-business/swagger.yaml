tags:
- name: users
  description: users API

paths:
# [POST] sign up user
  /signup2:
    post:
      tags:
      - sigup2
      summary: sign-up2
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/vender'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [POST] sign up user
  /:
    post:
      tags:
      - sigup
      summary: sign-up
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [POST] sign in user
  /login:
    post:
      tags:
      - login
      summary: login-in
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/user_login_dto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'        
  # [POST] sign in user
  /logout:
    post:
      tags:
      - logout
      summary: logout
      security:
        - basicAuth: []
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'            
# [GET] users          
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# definitions
definitions:
  users:
    type: object
    required:
        - user_login
        - user_email
        - user_password
    properties:
      user_login:
        type: string
        description: user login name
      user_email:
        type: string
        description: user Email
      user_password:
        type: string
        description: user Password
  user_login_dto:
    type: object
    required:
        # - user_login
        - user_email
        - user_password
    properties:
      # user_login:
      #   type: string
      #   description: user login name
      user_email:
        type: string
        description: user Email
      user_password:
        type: string
        description: user Password
  vender:
    type: object
    required:
        - user
        - vender_phone
        - vender_name
    properties:
      vender_phone:
        type: string
        description: user login name
      vender_name:
        type: string
        description: user name
      user:
        type: "object"
        properties:
          user_login:
            type: string
            description: user login name
          user_email:
            type: string
            description: user Email
          user_password:
            type: string
            description: user Password  
             

schemes:
 - https
 - http
