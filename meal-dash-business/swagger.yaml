tags:
- name: users
  description: users API

paths:
# [POST] sign up user
  /signup:
    post:
      tags:
      - sigup
      summary: sign-up
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# [POST] sign in user
  /login:
    post:
      tags:
      - login
      summary: login-in
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/user_login_dto'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'        
  # [POST] sign in user
  /logout:
    post:
      tags:
      - logout
      summary: logout
      security:
        - basicAuth: []
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'            
# [GET] users          
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [POST] insert mean plan
  /mealplan/add-mealplan:
    post:
      tags:
      - add-mealplan
      summary: add meal plan
      parameters:
      - name: body
        in: body
        description: meal Data
        required: true
        schema:
          $ref: '#/definitions/createmealplan'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
# definitions
definitions:
  users:
    type: object
    required:
        - user_login
        - user_email
        - user_password
        - phone
        - user_type
        - address1
        - address2
        - city
        - state
        - postal
    properties:
      user_login:
        type: string
        description: user login name
      user_email:
        type: string
        description: user Email
      user_password:
        type: string
        description: user Password
      phone:
        type: string
        description: user Phone
      user_type:
        type: string
        description: user Type
      address1:
        type: string
        description: user Address1
      address2:
        type: string
        description: user Address2
      city:
        type: string
        description: user City
      state:
        type: string
        description: user State
      postal:
        type: string
        description: user Postal

  user_login_dto:
    type: object
    required:
        # - user_login
        - user_email
        - user_password
    properties:
      # user_login:
      #   type: string
      #   description: user login name
      user_email:
        type: string
        description: user Email
      user_password:
        type: string
        description: user Password
  createmealplan:
    type: object
    required:
        - mealplan_recurrence
        - mealplan_title
        - mealplan_description
        - is_active
    properties:
      mealplan_recurrence:
        type: string
        description: meal plan recurrence
      mealplan_title:
        type: string
        description: meal plan title
      mealplan_description:
        type: string
        description: meal plan description
      is_active:
        type: boolean
        description: meal plan is active   
              
             

schemes:
 - https
 - http
